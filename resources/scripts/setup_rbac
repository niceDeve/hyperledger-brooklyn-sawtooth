#!/usr/bin/env python3

import argparse
import json
import sys
import time
import traceback

import http.client


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--host',
        help='The host of the RBAC server',
        required=True)
    parser.add_argument(
        '--port',
        help='The port of the RBAC server',
        default="8000")
    parser.add_argument(
        '--name',
        help='The name for the RBAC user',
        default='admin')
    parser.add_argument(
        '--password',
        help='The password for the RBAC user',
        default='password')
    parser.add_argument(
        '--email',
        help='The email for the RBAC user',
        default='admin@rbac.com')
    parser.add_argument(
        '--group-name',
        help='The name for the RBAC group',
        default='Administrators')
    parser.add_argument(
        '--retries',
        type=int,
        help='The number of retry attempts',
        default='3')
    return parser.parse_args(args)


def setup_rbac(host, port, name, password, email, group_name, retries):
    print("Sleeping for 2 minutes to wait for server...")
    time.sleep(120)

    try:
        conn = http.client.HTTPConnection(host, port)

        payload = {'name': name, 'password': password, 'email': email}
        headers = {'Content-Type': "application/json"}

        for i in range(retries):
            print("Creating user '%s'..." % (name,))

            conn.request("POST", "/api/users", json.dumps(payload), headers)
            res = conn.getresponse()

            data = res.read()
            print(data.decode("utf-8"))

            if res.status != 200:
                print("User creation attempt %s of %s failed!" % (str(i + 1), str(retries)))

                if i == (retries - 1):
                    print("User creation failed!")
                    exit(1)

                print("Sleeping %s seconds before retrying..." % (str((i + 1) * 5),))
                time.sleep((i + 1) * 5)
            else:
                print("Successfully created user '%s'!" % (name,))
                break

        data_object = json.loads(data.decode("utf-8"))
        response_data = data_object["data"]

        payload = {'name': group_name, 'administrators': [response_data["user"]["id"]], 'owners': [response_data["user"]["id"]]}
        headers = {
            'Content-Type': "application/json",
            'Authorization': response_data["authorization"]
        }

        for i in range(retries):
            print("Creating group '%s'..." % (group_name,))

            conn.request("POST", "/api/roles", json.dumps(payload), headers)
            res = conn.getresponse()

            data = res.read()
            print(data.decode("utf-8"))

            if res.status != 200:
                print("Group creation attempt %s of %s failed!" % (str(i + 1), str(retries)))

                if i == (retries - 1):
                    print("Group creation failed!")
                    exit(1)

                print("Sleeping %s seconds before retrying..." % (str((i + 1) * 5),))
                time.sleep((i + 1) * 5)
            else:
                print("Successfully created group '%s'!" % (group_name,))
                break
    except ConnectionRefusedError:
        traceback.print_exc()
        print("Failed to connect to the RBAC server!")
        exit(1)
    except http.client.HTTPException:
        traceback.print_exc()
        print("An error occurred during a request to the RBAC server!")
        exit(1)
    except Exception:
        traceback.print_exc()
        print("An unexpected error occurred!")
        exit(1)
    finally:
        conn.close()


if __name__ == '__main__':
    opts = parse_args(sys.argv[1:])
    setup_rbac(opts.host, opts.port, opts.name, opts.password, opts.email,
               opts.group_name, opts.retries)
