#!/usr/bin/env python3
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import argparse
import json
import sys
import time
import traceback

import http.client


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--host',
        help='The host of the RBAC server',
        required=True)
    parser.add_argument(
        '--port',
        help='The port of the RBAC server',
        default="8000")
    parser.add_argument(
        '--name',
        help='The name for the RBAC user',
        default='admin')
    parser.add_argument(
        '--password',
        help='The password for the RBAC user',
        default='password')
    parser.add_argument(
        '--email',
        help='The email for the RBAC user',
        default='admin@rbac.com')
    parser.add_argument(
        '--group-name',
        help='The name for the RBAC group',
        default='Administrators')
    parser.add_argument(
        '--retries',
        type=int,
        help='The number of retry attempts',
        default='3')
    return parser.parse_args(args)


def setup_rbac(host, port, name, password, email, group_name, retries):
    time.sleep(120)

    try:
        conn = http.client.HTTPConnection(host, port)

        payload = {'name': name, 'password': password, 'email': email}
        headers = {'Content-Type': "application/json"}

        for i in range(retries):
            conn.request("POST", "/api/users", json.dumps(payload), headers)
            res = conn.getresponse()
            data = res.read()

            if res.status != 200:
                if i == (retries - 1):
                    print("User creation failed!", file=sys.stderr)
                    exit(1)

                time.sleep((i + 1) * 5)
            else:
                break

        data_object = json.loads(data.decode("utf-8"))
        response_data = data_object["data"]

        print(response_data["user"]["id"])

        payload = {
          'name': group_name,
          'administrators': [response_data["user"]["id"]],
          'owners': [response_data["user"]["id"]]
        }
        headers = {
            'Content-Type': "application/json",
            'Authorization': response_data["authorization"]
        }

        for i in range(retries):
            conn.request("POST", "/api/roles", json.dumps(payload), headers)
            res = conn.getresponse()
            data = res.read()

            if res.status != 200:
                if i == (retries - 1):
                    print("Group creation failed!", file=sys.stderr)
                    exit(1)

                time.sleep((i + 1) * 5)
            else:
                break
    except ConnectionRefusedError:
        traceback.print_exc()
        print("Failed to connect to the RBAC server!", file=sys.stderr)
        exit(1)
    except http.client.HTTPException:
        traceback.print_exc()
        print("An error occurred during a request to the RBAC server!", file=sys.stderr)
        exit(1)
    except Exception:
        traceback.print_exc()
        print("An unexpected error occurred!", file=sys.stderr)
        exit(1)
    finally:
        conn.close()


if __name__ == '__main__':
    opts = parse_args(sys.argv[1:])
    setup_rbac(opts.host, opts.port, opts.name, opts.password, opts.email,
               opts.group_name, opts.retries)
